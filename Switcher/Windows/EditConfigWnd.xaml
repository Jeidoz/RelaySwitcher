<Window x:Class="Switcher.Windows.EditConfigWnd"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        mc:Ignorable="d"
        xmlns:validators="clr-namespace:Switcher.ValidationRules"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:converters="clr-namespace:Switcher.Data.Converters"
        xmlns:system="clr-namespace:System;assembly=mscorlib"
        xmlns:enums="clr-namespace:Switcher.Data.Enums"
        TextElement.Foreground="{DynamicResource MaterialDesignBody}"
        TextElement.FontWeight="Regular"
        TextElement.FontSize="13"
        TextOptions.TextFormattingMode="Ideal"
        TextOptions.TextRenderingMode="Auto"
        Background="{DynamicResource MaterialDesignPaper}"
        FontFamily="{DynamicResource MaterialDesignFont}"
        Title="Config edit"
        Width="640" Height="360"
        MinWidth="640" MinHeight="360"
        WindowStartupLocation="CenterOwner">
    <Window.Resources>
        <Style TargetType="TextBox" BasedOn="{StaticResource MaterialDesignTextBox}">
            <Setter Property="MaxHeight" Value="27"/>
        </Style>
        <ObjectDataProvider MethodName="GetValues"
                            ObjectType="{x:Type system:Enum}"
                            x:Key="RelayTypeValues">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="enums:RelayType" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <converters:EnumDescriptionConverter x:Key="RelayTypesConverter"/>
    </Window.Resources>
    <Grid>
        <materialDesign:Card Padding="15" Margin="10">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition Height="42"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="380"/>
                    <ColumnDefinition MinWidth="180"/>
                </Grid.ColumnDefinitions>

                <TextBox Grid.Row="0" Grid.Column="0"
                         Name="TxtIp"
                         Margin="5" Padding="0"
                         materialDesign:HintAssist.Hint="IP Address (i.e. 127.0.0.1)"
                         materialDesign:HintAssist.HelperText="IP Address">
                    <Binding Path="Ip"
                             UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <validators:IpValidation/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox>
                <TextBox Grid.Row="1" Grid.Column="0"
                         Name="TxtPort"
                         Margin="5" Padding="0"
                         materialDesign:HintAssist.Hint="Port (i.e. 60001)"
                         materialDesign:HintAssist.HelperText="Port">
                    <Binding Path="Port"
                             UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <validators:PortValidation/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox>
                <TextBox Grid.Row="2" Grid.Column="0"
                         Name="TxtPassword"
                         Margin="5" Padding="0"
                         materialDesign:HintAssist.Hint="Password (i.e. 1234)"
                         materialDesign:HintAssist.HelperText="Password (0 for none)">
                    <Binding Path="Password"
                             UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <validators:PasswordValidation/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox>
                <StackPanel Grid.Row="3" Grid.Column="0"
                            Orientation="Horizontal"
                            Margin="5">
                    <TextBlock Text="Pause between requests (seconds)"
                               VerticalAlignment="Center"/>
                    <Slider Minimum="0.1"
                            Maximum="5"
                            TickFrequency="0.1"
                            IsSnapToTickEnabled="True"
                            ToolTip="Pause between requests (in seconds)"
                            Value="{Binding PauseBetweenRequests}"
                            Width="120"
                            VerticalAlignment="Center"
                            Margin="10, 0"/>
                    <TextBox x:Name="SliderRequestsPause"
                             Text="{Binding PauseBetweenRequests}"
                             VerticalAlignment="Center"
                             ToolTip="Current pause value (in seconds)"
                             Width="45"/>
                </StackPanel>
                <CheckBox Grid.Row="4" Grid.Column="0"
                          Margin="5"
                          Style="{StaticResource MaterialDesignCheckBox}"
                          IsChecked="{Binding IsTopMost}">
                    Show above others windows?
                </CheckBox>
                <ComboBox Grid.Row="5" Grid.Column="0"
                          Margin="5"
                          materialDesign:HintAssist.Hint="Type of relay"
                          ItemsSource="{Binding Source={StaticResource RelayTypeValues}}"
                          SelectedItem="{Binding RelayType}">
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Converter={StaticResource RelayTypesConverter}}"/>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>

                <TextBlock Grid.Row="0" Grid.Column="1"
                         Text="Active switch buttons"
                         FontWeight="SemiBold"
                         HorizontalAlignment="Center"
                         FontSize="18"/>

                <ItemsControl Grid.Row="1" Grid.RowSpan="5" Grid.Column="1"
                              ItemsSource="{Binding RelayLabels}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <UniformGrid Columns="2"/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <ToggleButton Style="{StaticResource MaterialDesignSwitchToggleButton}"
                                              IsChecked="{Binding IsEnabled}"/>
                                <TextBlock Text="{Binding Label}"
                                           TextWrapping="Wrap"
                                           VerticalAlignment="Center"
                                           Margin="10, 0"/>
                            </StackPanel>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>

                <Button Content="Save"
                        Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="2"
                        Margin="5" Padding="0"
                        Click="SaveConfig_Click">
                    <Button.Style>
                        <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                            <Setter Property="IsEnabled" Value="False"/>
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=TxtIp, Path=(Validation.HasError)}" Value="false"/>
                                        <Condition Binding="{Binding ElementName=TxtPort, Path=(Validation.HasError)}" Value="false"/>
                                        <Condition Binding="{Binding ElementName=TxtPassword, Path=(Validation.HasError)}" Value="false"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="IsEnabled" Value="True"/>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
            </Grid>
        </materialDesign:Card>
    </Grid>
</Window>
